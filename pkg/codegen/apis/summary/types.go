// Package summary provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package summary

import (
	"time"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

func Point[T comparable](v T) *T {
	return &v
}

// Resource defines the model for Resource.
type Resource struct {
	File *string `json:"file,omitempty"`
	Line *string `json:"line,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// Environment defines the model for environment.
type Environment string

// List of Environment
const (
	Environment_DEVELOPMENT Environment = "DEVELOPMENT"
	Environment_PRODUCTION  Environment = "PRODUCTION"
	Environment_STAGING     Environment = "STAGING"
)

func (t Environment) IsIn(values ...Environment) bool {
	for _, v := range values {
		if t == v {
			return true
		}
	}
	return false
}

// Message defines the model for message.
type Message struct {
	Message *string `json:"message,omitempty"`
}

// Node defines the model for node.
type Node struct {
	// Env The environment that a machine is reporting from.
	Env *Environment `json:"env,omitempty"`

	// ExecTime The time of when the Puppet Report Ran. (time.RFC3339 format)
	ExecTime *string `json:"exec_time,omitempty"`

	// Fqdn The Hostname of the machine.
	Fqdn *string `json:"fqdn,omitempty"`

	// Runtime How long the puppet apply took.
	Runtime *string `json:"runtime,omitempty"`

	// State The estate of the machine from the report.
	State *State `json:"state,omitempty"`
}

// NodesResponse defines the model for nodesResponse.
type NodesResponse struct {
	Nodes *[]Node `json:"nodes,omitempty"`
}

// PuppetReport defines the model for puppetReport.
type PuppetReport struct {
	Changed *int `json:"changed,omitempty"`

	// Env The environment that a machine is reporting from.
	Env              *Environment `json:"env,omitempty"`
	ExecTime         *time.Time   `json:"exec_time,omitempty"`
	Failed           *int         `json:"failed,omitempty"`
	Fqdn             *string      `json:"fqdn,omitempty"`
	Id               *string      `json:"id,omitempty"`
	LogMessages      *[]string    `json:"log_messages,omitempty"`
	PuppetVersion    *float32     `json:"puppet_version,omitempty"`
	ResourcesChanged *[]Resource  `json:"resources_changed,omitempty"`
	ResourcesFailed  *[]Resource  `json:"resources_failed,omitempty"`
	ResourcesOk      *[]Resource  `json:"resources_ok,omitempty"`
	ResourcesSkipped *[]Resource  `json:"resources_skipped,omitempty"`
	Runtime          *string      `json:"runtime,omitempty"`
	Skipped          *int         `json:"skipped,omitempty"`

	// State The estate of the machine from the report.
	State *State `json:"state,omitempty"`
	Total *int   `json:"total,omitempty"`
}

// State defines the model for state.
type State string

// List of State
const (
	State_CHANGED   State = "CHANGED"
	State_FAILED    State = "FAILED"
	State_SKIPPED   State = "SKIPPED"
	State_UNCHANGED State = "UNCHANGED"
)

func (t State) IsIn(values ...State) bool {
	for _, v := range values {
		if t == v {
			return true
		}
	}
	return false
}
