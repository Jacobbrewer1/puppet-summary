// Package summary provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package summary

import (
	"time"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for Environment.
const (
	DEVELOPMENT Environment = "DEVELOPMENT"
	PRODUCTION  Environment = "PRODUCTION"
	STAGING     Environment = "STAGING"
)

// Defines values for State.
const (
	CHANGED   State = "CHANGED"
	FAILED    State = "FAILED"
	SKIPPED   State = "SKIPPED"
	UNCHANGED State = "UNCHANGED"
)

// Resource defines model for Resource.
type Resource struct {
	File *string `json:"file,omitempty"`
	Line *string `json:"line,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// Environment The environment that a machine is reporting from.
type Environment string

// GetAllNodesResponse defines model for getAllNodesResponse.
type GetAllNodesResponse = []struct {
	Nodes *[]Node `json:"nodes,omitempty"`
}

// Node defines model for node.
type Node struct {
	// Env The environment that a machine is reporting from.
	Env *Environment `json:"env,omitempty"`

	// ExecTime The time of when the Puppet Report Ran. (time.RFC3339 format)
	ExecTime *string `json:"exec_time,omitempty"`

	// Fqdn The Hostname of the machine.
	Fqdn *string `json:"fqdn,omitempty"`

	// Runtime How long the puppet apply took.
	Runtime *string `json:"runtime,omitempty"`

	// State The estate of the machine from the report.
	State *State `json:"state,omitempty"`
}

// State The estate of the machine from the report.
type State string

// UploadPuppetReportResponse defines model for uploadPuppetReportResponse.
type UploadPuppetReportResponse struct {
	Changed          *int        `json:"changed,omitempty"`
	Env              *string     `json:"env,omitempty"`
	ExecTime         *time.Time  `json:"exec_time,omitempty"`
	Failed           *int        `json:"failed,omitempty"`
	Fqdn             *string     `json:"fqdn,omitempty"`
	Id               *string     `json:"id,omitempty"`
	LogMessages      *[]string   `json:"log_messages,omitempty"`
	PuppetVersion    *float32    `json:"puppet_version,omitempty"`
	ResourcesChanged *[]Resource `json:"resources_changed,omitempty"`
	ResourcesFailed  *[]Resource `json:"resources_failed,omitempty"`
	ResourcesOk      *[]Resource `json:"resources_ok,omitempty"`
	ResourcesSkipped *[]Resource `json:"resources_skipped,omitempty"`
	Runtime          *string     `json:"runtime,omitempty"`
	Skipped          *int        `json:"skipped,omitempty"`
	State            *string     `json:"state,omitempty"`
	Total            *int        `json:"total,omitempty"`
}
