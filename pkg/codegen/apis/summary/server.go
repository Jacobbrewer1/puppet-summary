// Package summary provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package summary

import (
	"context"
	"fmt"
	"net/http"

	"github.com/Jacobbrewer1/puppet-summary/pkg/request"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all nodes
	// (GET /nodes)
	GetAllNodes(w http.ResponseWriter, r *http.Request)
	// Get all nodes by environment
	// (GET /nodes/enviroment/{env})
	GetAllNodesByEnvironment(w http.ResponseWriter, r *http.Request, env Environment)
	// Upload a puppet report
	// (POST /upload)
	UploadPuppetReport(w http.ResponseWriter, r *http.Request)
}

type AuthOption int

const (
	// AuthOptionNone is the option for no authentication.
	AuthOptionNone AuthOption = iota

	// AuthOptionInternal is the option to only allow internal traffic.
	AuthOptionInternal

	// AuthOptionRequired is the option for required authentication.
	AuthOptionRequired
)

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler, AuthOption) http.HandlerFunc

// GetAllNodes operation middleware
func (siw *ServerInterfaceWrapper) GetAllNodes(w http.ResponseWriter, r *http.Request) {
	cw := request.NewClientWriter(w)

	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllNodes(cw, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		// Check to see what kind of authentication is required

		opt := AuthOptionNone

		handler = middleware(handler, opt)
	}

	handler.ServeHTTP(cw, r.WithContext(ctx))
}

// GetAllNodesByEnvironment operation middleware
func (siw *ServerInterfaceWrapper) GetAllNodesByEnvironment(w http.ResponseWriter, r *http.Request) {
	cw := request.NewClientWriter(w)

	ctx := r.Context()

	var err error

	// ------------- Path parameter "env" -------------
	var env Environment

	err = runtime.BindStyledParameterWithOptions("simple", "env", mux.Vars(r)["env"], &env, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(cw, r, &InvalidParamFormatError{ParamName: "env", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllNodesByEnvironment(cw, r, env)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		// Check to see what kind of authentication is required

		opt := AuthOptionNone

		handler = middleware(handler, opt)
	}

	handler.ServeHTTP(cw, r.WithContext(ctx))
}

// UploadPuppetReport operation middleware
func (siw *ServerInterfaceWrapper) UploadPuppetReport(w http.ResponseWriter, r *http.Request) {
	cw := request.NewClientWriter(w)

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadPuppetReport(cw, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		// Check to see what kind of authentication is required

		opt := AuthOptionRequired

		handler = middleware(handler, opt)
	}

	handler.ServeHTTP(cw, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/nodes", wrapper.GetAllNodes).Methods("GET")

	r.HandleFunc(options.BaseURL+"/nodes/enviroment/{env}", wrapper.GetAllNodesByEnvironment).Methods("GET")

	r.HandleFunc(options.BaseURL+"/upload", wrapper.UploadPuppetReport).Methods("POST")

	return r
}
