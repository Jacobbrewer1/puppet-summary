func Point[T comparable](v T) *T {
    return &v
}
{{range .Types}}
{{if ne .TypeName .Schema.TypeDecl }}
{{- if gt (len .Schema.UnionElements) 0 }}
// {{.TypeName}} defines the model for {{.JsonName}}.
type {{.TypeName}} = interface{}
{{- else -}}
// {{.TypeName}} defines the model for {{.JsonName}}.
type {{.TypeName}} {{.Schema.TypeDecl}}
{{- end }}
{{end}}
{{- if and (gt (len .Schema.EnumValues) 0) (eq .Schema.GoType "string") }}
// List of {{ .TypeName }}
const (
	{{- $typeName := .TypeName }}
    {{- range $key, $value := .Schema.EnumValues }}
    {{ $typeName }}_{{ $value }} {{ $typeName }} = "{{ $value }}"
    {{- end }}
)

var {{ .TypeName }}s = []{{ .TypeName }}{
	{{- $typeName := .TypeName }}
    {{- range $key, $value := .Schema.EnumValues }}
    {{ $typeName }}_{{ $value }},
    {{- end }}
}

// IsIn checks if the value is in the list of {{ .TypeName }}
func (t {{ $typeName }}) IsIn(values ...{{ $typeName }}) bool {
    for _, v := range values {
        if t == v {
            return true
        }
    }
    return false
}

// IsValid checks if the value is valid
func (t {{ $typeName }}) IsValid() bool {
    return t.IsIn({{ $typeName }}s...)
}
{{- end }}
{{end}}